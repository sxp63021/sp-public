#include <iostream>
#include <thread>
#include <chrono>
#include <condition_variable>
//#include <atomic>
/*
 * class generated by perplexity to create a task every 5 min
 * this will run a periodic task every 5 min
 */
class PeriodicTask {
public:
    PeriodicTask() : stop_flag(false) {
        worker_thread = std::thread(&PeriodicTask::run, this);
    }

    ~PeriodicTask() {
        {
            std::lock_guard<std::mutex> lock(mutex);
            stop_flag = true;
        }
        condition.notify_one();
        worker_thread.join();
    }

    void run() {
        std::unique_lock<std::mutex> lock(mutex);
        while (!stop_flag) {
            if (condition.wait_for(lock, std::chrono::seconds(11), [this] { return stop_flag; })) {
                // Stop flag is true, exit the loop
                break;
            }
            // Perform the periodic task
            std::cout << "Performing task..." << std::endl;
        }
    }

private:
    std::thread worker_thread;
    std::mutex mutex;
    std::condition_variable condition;
//    std::atomic<bool> stop_flag;
    bool stop_flag;
};

int main() {
    PeriodicTask task;
    // The main thread can perform other tasks here
    std::this_thread::sleep_for(std::chrono::minutes(15)); // Simulate main thread work
    return 0;
}

