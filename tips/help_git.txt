GIT commands for help

From: https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet

BASICS
~~~~~~

1. git init <directory>
    Create empty Git repo in specified directory. Run with no
    arguments to initialize the current directory as a git repository.
    
2. git clone <repo> 
Clone repo located at <repo> onto local machine. Original repo can be
located on the local filesystem or on a remote machine via HTTP or SSH

3. git config user.name <name>
Define author name to be used for all commits in current repo. Devs
commonly use --global flag to set config options for current user.

4. git add <directory>

5. git commit -m "message"

6. git status

7. git log

8. git diff


UNDOING CHANGES
~~~~~~~~~~~~~~~~
Scenario: You made some changes on your local branch and
          commited to the local branch.
	      You don't want to push these changes on local
          branch, you can do the following 3 steps to revert back
          This will show a log message in "git log"

1. git revert <commit>
2. git reset <file>
3. git clean -n

Rewriting Git History
~~~~~~~~~~~~~~~~~~~~~
1. git commit --amend

2. git rebase <base>

3. git reflog

GIT BRANCHES
~~~~~~~~~~~~~
1. git branch
2. git checkout -b <branch>
3. git merge <branch>

Scenario: Branch B is made from A, changes in A need to be merged with Branch b
~~~~~~~~~
1. git checkout branch_a
2. git pull -> to make sure all changes are fetched
3. git checkout branch_b
4. git merge branch_a -> this will bring all changes into branch_b
5. if any files are merged, git status will show ur branch is ahead of branch on repo
6. git push -> if there are any changes that are merged, they need to be
               pushed to the gitrepo
7. git status -> this will show that the local branch has same changes as in the repo

REMOTE REPOSITORIES
~~~~~~~~~~~~~~~~~~~
1. git remote add <name> <url>

2. git fetch <remte> <branch>

3. git pull <remote>

4. git push <remote> <branch>

ADVANCED
~~~~~~~~
Scenario1 :
===========
I want to pull only certain directories from git, not everything from the repo

a. mkdir <repo> && cd <repo>
b. git init
c. git remote add â€“f <url>
d. git config core.sparsecheckout true
e. echo some/dir/ >> .git/info/sparse-checkout
f. echo another/sub/tree >> .git/info/sparse-checkout
g. git pull origin master

This will help to pull only specific directories rather than all the files

Using from Windows
~~~~~~~~~~~~~~~~~~
Good frontend GUI - sourcetree, tortoise git, GIT GUI
When installing tortoise GIT, it asked me to install https://gitforwindows.org/
After installing, right click in the folder you plan to clone the repo
Product installation will ask you "Name" and "Email"

$git checkout <filename> -> if you want to delete your changes and want original file
$git log -> to see what are all the changes
$git status -> to see if my changes are pushed, any commits, anything need to be pulled
$git checkout <branch_name> -> if you want to switch branches
#git fetch -> only downloads data from remote repo, but does not
              integrate any of these changes.
$git pull -> to pull the changes from repo into local directory
$git push -> to push local changes into repo

